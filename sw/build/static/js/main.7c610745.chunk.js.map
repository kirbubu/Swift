{"version":3,"sources":["Components/Title.js","Components/InfoTable.js","Components/DownloadPage.js","Components/GuidePage.js","Components/MainPage.js","Components/Routes.js","Components/MainNav.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Title","react_default","a","createElement","this","props","title","React","Component","ThreadComponent","console","log","styles","titleStyle","color","font-family","postStyle","text-align","imageStyle","width","height","data","style","index","thumbnail","src","href","url","concat","points","comments","subreddit","user","InfoRow","Row","Col","xs","md","DownloadPage","Grid","Panel","GuidePage","className","GuidePage_InfoRow","id","MainPage","state","hovering","hovering1","hovering2","_this2","Jumbotron","alt","class","Button","bsStyle","Components_Title","StyledLogo","pose","onMouseEnter","setState","onMouseLeave","SwiftionaryLogo","posed","div","idle","scale","opacity","transition","tween","Object","objectSpread","duration","background","hovered","styled","_templateObject","Routes","BrowserRouter","process","Route","exact","path","component","MainNav","Navbar","Header","Brand","Toggle","Collapse","Nav","NavItem","eventKey","NavDropdown","MenuItem","divider","App","Components_MainNav","Components_Routes","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.7c610745.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Title extends React.Component\r\n{\r\n    render()\r\n    {\r\n        return(\r\n        \r\n            <h1>{this.props.title}</h1>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Title;","import React, {Component} from 'react';\r\nimport {Table} from 'react-bootstrap';\r\n\r\n\r\n/***\r\n * Function ThreadComponent(props)\r\n * \r\n * This is a function that initalizes all the information within the InfoTable\r\n * As of now, it takes information from a reddit JSON file. In the future, it could\r\n * take posts from a onsite forum etc...\r\n */\r\nfunction ThreadComponent(props){\r\n    // For debugging in chrome \r\n    console.log(props);\r\n    //Should move to a CSS file. This is CSS written within Javascript (bad practice)\r\n    const styles ={\r\n        titleStyle:{\r\n            color:'blue',\r\n            'font-family':'Montserrat'\r\n        },\r\n        postStyle:{\r\n            'font-family':'Montserrat',\r\n            'text-align':'left'\r\n        },\r\n        imageStyle:{\r\n            width:105,\r\n            height:105\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ABOUT PROPS\r\n     * \r\n     * Props allows us to create data objects within a component (even though this\r\n     * is a function, we are essentially returning a component).\r\n     * Given the input props props allows us to create new data objects we can refer to within\r\n     * the component, for example when props.title is initialized below.\r\n     */\r\n\r\n\r\n    //Save the props to data object\r\n    const {data} = props;\r\n    //Return a component, specifically a table row <tr>\r\n    return(\r\n        <tr>\r\n            {/* Props.index = current number */}\r\n            <td style={styles.titleStyle}>{props.index}</td>\r\n            \r\n            {/* Table data <td> With a tertiary statement...\r\n                if the thumbnail isn't equal to \"self\" (which is a default image/status\r\n                subreddits have when an image isn't include with a post). If it isn't equal to self\r\n                then it is equal to an image, so set the thumbnail equal to an image. Else, set it equal to \r\n                a default image.\r\n            */}\r\n            <td>\r\n                {\r\n                    (data.thumbnail !== \"self\") ? <img src={data.thumbnail}></img> : <img style={styles.imageStyle} src=\"Swiftionary Logo.png\"></img>\r\n                }\r\n            </td>\r\n            {/* Create a new table data,containing url for the link, the title of the post, etc... */}\r\n            <td style={styles.postStyle}>\r\n            <a href={data.url}>\r\n                <p>{props.title}</p>\r\n                </a>\r\n                <p>{`${props.points} points - ${props.comments} comments - r/${props.subreddit} -Posted by u/${props.user}`}</p>\r\n            </td>\r\n            \r\n        </tr>\r\n    )\r\n};\r\n\r\n/***\r\n * InfoTable Component\r\n * \r\n * InfoTable is a mockup of subreddit page. Any subreddit can be fetched\r\n * if the .json tag is added to the end of the main page of any subreddit.\r\n */\r\nclass InfoTable extends Component {\r\n\r\n\r\n    \r\n    // Create a constsructor for the class, where the props come from the original component\r\n    // Data is set equal to a empty object\r\n    constructor(props){\r\n        super(props);\r\n        this.state= {\r\n            data : {},\r\n\r\n        };\r\n    }\r\n\r\n    \r\n    /**\r\n     * Async ComponentDidMount\r\n     * This is an asynchronous function, which allows other processes to continue while\r\n     * this process fulfills its request of fetching from the .json file online\r\n     */\r\n    async componentDidMount(){\r\n        // Using fetch, save the response information from this json \r\n        // Await must be used to call function within async that you need wait for.\r\n        const response = await fetch('https://www.reddit.com/r/firefox/.json');\r\n        // Type converting the response to json.\r\n        const json = await response.json();\r\n        // Now set the current state to the the const json and confirm the\r\n        // data has now been received\r\n        this.setState({\r\n            data: json,\r\n            gotData:true,\r\n        });\r\n    }\r\n\r\n    render(){ \r\n        // Receive the data from the state\r\n        const {data,gotData} = this.state;\r\n        //Console information for chrome debugging\r\n        console.log(gotData, data);\r\n        return(\r\n        <Table striped bordered condensed hover>\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Posts</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n            {\r\n                // Map takes in anonymous function. The function will return thread components for each index in the array\r\n                // given the array data. Uses arrow function | gotData must be true for the filter to render\r\n                gotData && data.data.children.map((child,index) => {\r\n                        const {data } =child;\r\n                        return(\r\n                            /**\r\n                             * ThreadComponent, which is defined above, allows us \r\n                             * to map the information from child (which we saved into data)\r\n                             * Therefore we're mapping all the data objects from the .json children data objects\r\n                             * to the data objects (props) we defined within ThreadComponent\r\n                             */\r\n                        <ThreadComponent\r\n                            index={index+1}\r\n                            title={data.title}\r\n                            points={data.score}\r\n                            comments={data.num_comments}\r\n                            subreddit={data.subreddit}\r\n                            user={data.author}\r\n                            permalink ={data.permalink}\r\n                            data={data}\r\n                            thumbnail\r\n                        />\r\n                        );\r\n                }\r\n                )\r\n            }\r\n        </tbody>\r\n      </Table>\r\n    )\r\n    }\r\n\r\n}\r\n\r\nexport default InfoTable;","import React, { Component } from 'react';\r\nimport logo from './../logo.svg';\r\nimport './../App.css';\r\nimport {Panel,Navbar,Nav,NavItem,MenuItem,NavDropdown,Grid,Row,Col} from 'react-bootstrap';\r\nimport Title from './Title';\r\nimport InfoTable from './InfoTable';\r\nimport MainNav from './MainNav';\r\n\r\n// Currently under construction contains all the information for the downloadpage\r\n// all will eventually include download links.\r\nclass DownloadPage extends Component{  \r\n    render(){\r\n        return(\r\n            <div>\r\n                <header> \r\n                    <h1>Swiftionary </h1>\r\n                    <Grid>\r\n                        <Panel>\r\n                            <Grid>\r\n                                <InfoRow index={1}title=\"Setup\"/>\r\n                            </Grid>\r\n                            \r\n                        </Panel>\r\n                        {/* TODO: Add rows and columns for formatting parts\r\n                        of the webpage */}\r\n                    </Grid>\r\n                </header>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction InfoRow(props){\r\n    return(\r\n        <Row>\r\n            <Col xs={3} md={1}>\r\n                {props.index + \". \" + props.title}\r\n            </Col>\r\n        </Row>\r\n    )\r\n};\r\n\r\n\r\nexport default DownloadPage;","import React, { Component } from 'react';\r\nimport logo from './../logo.svg';\r\nimport './Component CSS/DownloadPage.css';\r\nimport {Panel,Navbar,Nav,NavItem,MenuItem,NavDropdown,Grid,Row,Col} from 'react-bootstrap';\r\nimport Title from './Title';\r\nimport InfoTable from './InfoTable';\r\nimport MainNav from './MainNav';\r\n\r\n// Currently under construction contains all the information for the downloadpage\r\n// all will eventually include download links.\r\nclass GuidePage extends Component{  \r\n    render(){\r\n        return(\r\n            <div>\r\n                <header> \r\n                    \r\n                    <Grid  className=\"UserGuideGrid\">\r\n                        <Row>\r\n                            <h1>Swiftionary User Guide</h1>\r\n                            <Col xs={12} md={4}>\r\n                                <Panel>\r\n                                    <Grid>\r\n                                            <Row>\r\n                                                <Col xs={3} md={3}><p className=\"PanelHeader\">Contents</p></Col>\r\n                                            </Row>\r\n                                            <InfoRow index={1}title=\"Foreword\" href=\"#foreword\"/>\r\n                                            <InfoRow index={2}title=\"Setup\" href=\"#setup\"/>\r\n                                            <InfoRow index={3}title=\"Right Click Feature\" href=\"#rightclick\"/>\r\n                                    </Grid>\r\n                                    \r\n                                </Panel>\r\n                            </Col>\r\n                            <div>\r\n                                <h3 id='#foreword'className=\"Header\">Foreword</h3>\r\n                                <hr/>\r\n                                <p>\r\n                                Many people face a problem whenever they see a word that they do not recognize. \r\n                                We live in an age where the Internet is used heavily. \r\n                                An increasing amount of people are using the Internet to learn new information. \r\n                                With many pages being visited every day by a single person, \r\n                                they are bound to encounter words that they do not recognize. The information age we \r\n                                live in relies a lot on the Internet. When people find a word they do not know the meaning of, \r\n                                a phrase, or name that they do not recognize, they have to open another tab in order to search for \r\n                                the meaning of what they are interested in. The rate at which we transfer requests from our brains to \r\n                                computers needs to be sped up and this project will help us move one step further towards this goal. \r\n                                </p>\r\n                            </div>\r\n                            <div>\r\n                                <h3 id=\"#setup\">Setup</h3>\r\n                                <hr/>\r\n                                <p >\r\n                                To get started, the user will need to find Swiftionary on the Google Chrome web store. \r\n                                They can use the search bar on the Google Chrome web store and type in “Swiftionary” \r\n                                to find the page for the extension. Once they find the web extension, they must click install so \r\n                                they can install the extension for their browser. When the extension is installed, the user can click on\r\n                                the Swiftionary logo on the taskbar and go to the preferences menu. They can choose which features they \r\n                                would like to remove so the features that are not relevant to them will not appear. This will make it\r\n                                easier for them to not feel overwhelmed when they right click on a word or phrase since they won’t be\r\n                                seeing every single option that may not be relevant to them. After they are finished with their\r\n                                preferences, they can now see the options provided from Swiftionary when they highlight a word or\r\n                                phrase and right click on it.\r\n                                </p>\r\n                            </div>\r\n                            <div>\r\n                                <h3 id=\"#rightclick\">Right Click Feature</h3>\r\n                                <hr/>\r\n                                <p >\r\n                                Billy decides to do some personal research on frogs and comes across a word that he does not understand. \r\n                                Frustrated with having to constantly open separate tabs when he wants to learn something about a word, \r\n                                so he decides to look for an extension to help with this issue.\r\n                                </p>\r\n                                <p >\r\n                                After a while Billy comes across the the extension Swiftionary and decides to download it and try it out. \r\n                                After he downloads it he heads back to the website to give it a test run.\r\n                                </p>\r\n                                <p>\r\n                                Billy highlights the word that he was originally unsure about with his hopes held high. \r\n                                Next he right clicks the highlighted word to bring up the right click menu.\r\n                                </p>\r\n                                <p>\r\n                                Billy now sees that he has a new option to pick from on his right click menu. \r\n                                He moves his cursor over the new Swiftionary option and a new menu will appear to the \r\n                                right of that with the settings that Billy has set into his Swiftionary preferences.\r\n                                </p>\r\n                                <p>\r\n                                Billy could have chosen to see less options for a single word highlight but has chosen to see how many options he has to work with. \r\n                                From the option menu that has appeared Billy can select from a total of six different functions. \r\n                                To find out more on what the word means Billy decides to select the definition option.\r\n                                </p>\r\n                                <p>\r\n                                A small window opens onto the window and tab that Billy was currently in and gives him the definition of the \r\n                                word that he wanted to know. The window was small and the result fast so \r\n                                Billy could continue with his research on frogs without any additional hassle.\r\n                                </p>\r\n                            </div>\r\n                        {/* TODO: Add rows and columns for formatting parts\r\n                        of the webpage */}\r\n                        </Row>\r\n                    </Grid>\r\n                </header>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction InfoRow(props){\r\n    return(\r\n        <Row>\r\n            <Col xs={3} md={3}>\r\n            {props.index + \". \"}\r\n                <a href={props.href}>\r\n                    {props.title}\r\n                </a>\r\n            </Col>\r\n        </Row>\r\n    )\r\n};\r\n\r\n\r\nexport default GuidePage;","import React, { Component } from 'react';\r\nimport posed from 'react-pose';\r\nimport styled from 'styled-components';\r\nimport logo from './../logo.svg';\r\nimport './../App.css';\r\nimport {Jumbotron,Button,Navbar,Nav,NavItem,MenuItem,NavDropdown,Grid,Row,Col} from 'react-bootstrap';\r\nimport Title from './Title';\r\nimport InfoTable from './InfoTable';\r\nimport MainNav from './MainNav';\r\nimport DownloadPage from './DownloadPage';\r\nimport { tween } from 'popmotion';\r\n\r\n/**\r\n * MainPage Component\r\n * \r\n * The MainPage component contains the general information for the\r\n * front page of the website. \r\n * \r\n * \r\n */\r\n\r\n \r\nclass MainPage extends Component{\r\n  state = {hovering:false, hovering1:false, hovering2: false};\r\n  render(){\r\n    return(\r\n      <div className=\"MainPage\">\r\n              <header>      \r\n                {/* Create a jumbotron component (from bootstrap) */}\r\n                <Jumbotron className=\"App-header Container-Fluid\">\r\n                {/* Add the swiftionary logo text.\r\n                    alt is a string that will display if the image can't be loaded\r\n                    the class Swiftionary in CSS allows the image to resize as \r\n                    the screen resolution changes\r\n                */}\r\n                <img src=\"Swiftionary Text.png\" alt=\"Swiftionary Text\" class=\"Swiftionary\"/>\r\n                {/* Text */}\r\n                <p>\r\n                  A simple way to conveniently search\r\n                </p>\r\n                {/* Creating a button\r\n                      bsStyle is an automatic styling through bootstrap\r\n                      Works fine for now but in future might look better\r\n                      to write on custom CSS to better fit the theme of the webpage.\r\n                    */}\r\n                <p>\r\n                  <Button bsStyle='info' className=\"Montserrat\">Learn more</Button>\r\n                </p>\r\n                </Jumbotron>\r\n                {/* Grid is also a bootstrap component That allows you to place\r\n                  components on a dynamic grid. Good for spacing out elements and\r\n                  making the website look well formatted instead of just all the \r\n                  components on top of each other */}\r\n                <div className=\"MainGrid\" >\r\n                <p className=\"MainText\">\r\n                  Swiftionary allows you to search without hassle. No more opening tabs, \r\n                  losing concentration, or skipping over words.\r\n                </p>\r\n                <p className=\"MainText\">\r\n                  <Title title='See how it works.'/>\r\n                  <p>Swiftionary works in a simple fashion to simplify trivial searches. No typing,\r\n                    no search bars, just instant results.\r\n                  </p>\r\n                  <p>With a plethora of features for users to explore, Swiftionary\r\n                      allows you to learn different things about the unknown in different\r\n                      ways.\r\n                  </p>\r\n                  \r\n                </p>\r\n                <Grid className=\"MainGrid\">\r\n                  {/* Creating a row */}\r\n                  <Row>\r\n                    {/* Column size is actually the row width, or the column width I guess?\r\n                        You want to initialize xs as {12} as that's a default size for most\r\n                        webpages and a standard. md refers how big the column will. So if\r\n                        xs={12}, 12 is the maximum components can take up in that horizontal\r\n                        plane. when md=4, your taking up 4 out of the 12 spaces in the row,\r\n                        meaning there's 8 left.\r\n                      */}\r\n                      <Col xs={12} md={4}>\r\n                        <StyledLogo \r\n                        pose={this.state.hovering ? \"hovered\" : \"idle\"}\r\n                        onMouseEnter={()=> this.setState({hovering:true})}\r\n                        onMouseLeave={()=> this.setState({hovering:false})}\r\n                        >\r\n                        <div className=\"PopupBox\">\r\n                            <h2>burlesque</h2>\r\n                            <hr/>\r\n                            <p>/ˌbərˈlesk/</p>\r\n                            <i>noun</i>\r\n                            <p>an absurd or comically exaggerated imitation of something, especially in a literary or dramatic work; a parody.</p>\r\n                        </div></StyledLogo>\r\n                      {/* <img src=\"Swiftionary Logo.png\" width=\"100\" height=\"100\"/> */}\r\n                      </Col>\r\n                      {/* Use up the other eight spaces in the row with a table. It will\r\n                      appear to the right of the logo when wide enough, or below it on mobile\r\n                      due to the lack of space (tables are huge) */}\r\n                      <Col xs={12} md={4}>\r\n                      <StyledLogo \r\n                        pose={this.state.hovering1 ? \"hovered\" : \"idle\"}\r\n                        onMouseEnter={()=> this.setState({hovering1:true})}\r\n                        onMouseLeave={()=> this.setState({hovering1:false})}\r\n                        >\r\n                        <div className=\"PopupBox\">\r\n                            <h2>moonstruck</h2>\r\n                            <hr/>\r\n                            <p>/ˈmo͞onˌstrək/</p>\r\n                            <i>adjective</i>\r\n                            <p>unable to think or act normally, especially because of being in love.</p>\r\n                        </div></StyledLogo>\r\n                        {/* <InfoTable/> */}\r\n                      </Col>\r\n                      <Col xs={12} md={4}>\r\n                      <StyledLogo \r\n                        pose={this.state.hovering2 ? \"hovered\" : \"idle\"}\r\n                        onMouseEnter={()=> this.setState({hovering2:true})}\r\n                        onMouseLeave={()=> this.setState({hovering2:false})}\r\n                        >\r\n                        <div className=\"PopupBox\">\r\n                            <h2>sibilate</h2>\r\n                            <hr/>\r\n                            <p>/ˈsibəˌlāt/</p>\r\n                            <i>verb</i>\r\n                            <p>to utter or pronounce with a hissing sound.</p>\r\n                        </div></StyledLogo>\r\n                      </Col>\r\n                  </Row>\r\n                </Grid>\r\n                {/* Paragraph information.\r\n                  Most of this information isn't well formatted Needs editing via CSS\r\n                  TODO: Create CS and stylize this part better (put it back in center of page\r\n                  or make smaller) */}\r\n                <p className=\"MainText\"> \r\n                  <Title title='Choose what you want.'/>\r\n                  <p>Don't like highlighting? Right click on the word to select options.\r\n                    Don't like all the options Swifitonary provides? Choose which ones you \r\n                    like the best.\r\n                  </p>\r\n                  <p>\r\n                    Choose what features you've been looking for when you initally download\r\n                    Swiftionary. If you grow tired of one, or are looking for something new,\r\n                    you can always change it up in the settings.\r\n                  </p>\r\n                </p>\r\n                </div>\r\n              </header>\r\n            </div>\r\n          );\r\n  }\r\n}\r\n\r\nconst SwiftionaryLogo = posed.div({\r\n  \r\n  idle: {\r\n    scale: 1,\r\n    opacity: 0.75,\r\n    transition: props=>tween({...props, duration:2000}),\r\n    background: \"#61dafb\"\r\n  },\r\n  hovered: {\r\n    scale: 1.25,\r\n    opacity: 1,\r\n    transition: props=> tween({...props, duration:1000}),\r\n    background: \"#ffffff\"\r\n  }\r\n})\r\n\r\nconst StyledLogo = styled(SwiftionaryLogo)`\r\n  border-radius:25px;\r\n  padding:10px;\r\n`;\r\n\r\nexport default MainPage;","import React, {Component} from 'react';\r\nimport {Route, BrowserRouter} from 'react-router-dom';\r\nimport {createBrowserHistory}from 'history';\r\nimport DownloadPage from './DownloadPage';\r\nimport GuidePage from './GuidePage';\r\nimport MainPage from './MainPage';\r\n\r\n\r\n/**\r\n * Routes Component \r\n * \r\n * Routes is a BrowserRouter Component that contains all of the available routes\r\n * to the different webpages. It renders new components on the screen instead of\r\n * loading up completely different html files, which is a hassle to code.\r\n * \r\n * The BrowserRouter class encapsulates different routes, whose paths determine\r\n * what the url extension to the original webpage needs to be. \r\n * \r\n * For example, localhost:3000 would load the MainPage component, while\r\n * localhost:3000/downloads would load the DownloadPage component.\r\n * \r\n * Instantiating this module in a different app will render the components whenever\r\n * the url is defined. <Routes/> is called in App.cs before MainNav. \r\n */\r\nclass Routes extends Component{\r\n    render(){\r\n        return(\r\n    \r\n        <BrowserRouter>\r\n                <div>\r\n                {console.log(process.env.PUBLIC_URL)}\r\n                <Route exact path={process.env.PUBLIC_URL + '/'} component={MainPage}/>\r\n                <Route exact path= {process.env.PUBLIC_URL + '/downloads'} component={DownloadPage}/>\r\n                <Route exact path={process.env.PUBLIC_URL + '/user-guide'} component={GuidePage}/>\r\n                </div>\r\n        </BrowserRouter>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Routes;","import React, { Component } from 'react';\r\nimport {Navbar,Nav,NavItem,MenuItem,NavDropdown} from 'react-bootstrap';\r\nimport {Router, Route,Link,hashHistory,BrowserRouter, Switch} from 'react-router-dom';\r\nimport DownloadPage from './DownloadPage';\r\nimport App from './../App';\r\nimport Routes from './Routes';\r\n\r\n/**\r\n * MainNav Component\r\n * \r\n * MainNav is navbar at the top of the screen that serves \r\n * as a way for users to click on links to different areas of the webpage.\r\n * All of the routes to the different webpages are defined in Routes.js\r\n * Most formatting contained within this file.\r\n * \r\n * TODO: Transfer some of the hmtl code to CSS to reduce clutter.\r\n * \r\n * Explanations of the code below\r\n */\r\nclass MainNav extends Component{\r\n    render() {\r\n        return(\r\n        // Render only returns one component. You cannot return multiple components,\r\n        // if you want to send a multi-faceted component, wrap it within a <div> tag!\r\n        <div className=\"fixed-top\">\r\n        {/* This is an inline comment. Use Ctrl+/ to easily write\r\n        Javascript comments within html code. Essentially the brackets\r\n        allow you to write Javascript within html code. */}\r\n        <Navbar>\r\n            {/* Navbar is a bootstrap component */}\r\n            <Navbar.Header>\r\n                {/*Wrap the image within a link for home page*/}\r\n                <a href={process.env.PUBLIC_URL + \"/\"} class=\"navbar-brand\">\r\n                    <img src=\"Swiftionary Logo.png\" width=\"25\" height=\"25\" alt=\"Swiftionary\"/>\r\n                </a>\r\n                <Navbar.Brand>\r\n                    {/* Wrap Swiftioanry text within link for home page */}\r\n                    <a href= {process.env.PUBLIC_URL + \"/\"} className=\"Montserrat navbar-padding\">\r\n                    Swiftionary</a>\r\n                </Navbar.Brand>\r\n                <Navbar.Toggle/>\r\n            {/* New Header created, for Downloads */}\r\n            </Navbar.Header>\r\n            <Navbar.Collapse>\r\n            <Nav>\r\n                {/* Wrap the Downloads text for the download page */}\r\n                <NavItem eventKey={1} href= { process.env.PUBLIC_URL + \"/downloads\"} className=\"Montserrat\">\r\n                    Download\r\n                </NavItem>\r\n                <NavItem eventKey={2} href=\"#\" className=\"Montserrat\">\r\n                    About\r\n                </NavItem>\r\n                {/* Nav Dropdown Menu for a NavItem option that requires multiple things */}\r\n                <NavDropdown eventKey={3} title=\"Help\" id=\"basic-nav-dropdown\" className=\"Montserrat\">\r\n                    <MenuItem eventKey={3.1} href={process.env.PUBLIC_URL+'/user-guide'}>Use Guide</MenuItem>\r\n                    <MenuItem eventKey={3.2}>Features</MenuItem>\r\n                    <MenuItem eventKey={3.3}>Customization</MenuItem>\r\n                    <MenuItem divider/>\r\n                    <MenuItem eventKey={3.4}>Contact Information</MenuItem>\r\n                </NavDropdown>\r\n            </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\n// Make the default export MainNav.\r\nexport default MainNav;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Jumbotron,Button,Navbar,Nav,NavItem,MenuItem,NavDropdown,Grid,Row,Col} from 'react-bootstrap';\nimport Title from './Components/Title';\nimport InfoTable from './Components/InfoTable';\nimport MainNav from './Components/MainNav';\nimport DownloadPage from './Components/DownloadPage';\nimport MainPage from './Components/MainPage';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport Routes from './Components/Routes';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <MainNav></MainNav>\n        <Routes/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Router, Route,BrowserRouter} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}